// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/1704mori/registry.ui/internal/config"

func Settings(cfg *config.Config, theme string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"space-y-6\"><header><h1 class=\"text-2xl font-bold\">Settings</h1></header><div class=\"bg-white dark:bg-neutral-800 rounded-lg shadow\"><div class=\"px-6 py-4 border-b border-neutral-200 dark:border-neutral-700\"><h2 class=\"text-lg font-medium\">Registry Configuration</h2></div><div class=\"p-6\"><form id=\"settings-form\" action=\"/settings\" method=\"POST\" class=\"space-y-6\"><div class=\"grid grid-cols-1 gap-6\"><div><label for=\"registry_url\" class=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300\">Registry URL</label> <input type=\"text\" name=\"registry_url\" id=\"registry_url\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(cfg.RegistryURL)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templates/pages/settings.templ`, Line: 23, Col: 31}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\" required class=\"mt-1 block w-full border-neutral-300 dark:border-neutral-700 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-white dark:bg-neutral-900\" placeholder=\"https://registry.example.com\"><p class=\"mt-1 text-sm text-neutral-500 dark:text-neutral-400\">The URL of the Docker registry (e.g., https://registry.example.com)</p></div><div><label for=\"registry_username\" class=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300\">Registry Username</label> <input type=\"text\" name=\"registry_username\" id=\"registry_username\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(cfg.RegistryUsername)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templates/pages/settings.templ`, Line: 36, Col: 36}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\" class=\"mt-1 block w-full border-neutral-300 dark:border-neutral-700 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-white dark:bg-neutral-900\" placeholder=\"username\"><p class=\"mt-1 text-sm text-neutral-500 dark:text-neutral-400\">Optional: Username for registry authentication</p></div><div><label for=\"registry_password\" class=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300\">Registry Password</label> <input type=\"password\" name=\"registry_password\" id=\"registry_password\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(cfg.RegistryPassword)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templates/pages/settings.templ`, Line: 48, Col: 36}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "\" class=\"mt-1 block w-full border-neutral-300 dark:border-neutral-700 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-white dark:bg-neutral-900\" placeholder=\"password\"><p class=\"mt-1 text-sm text-neutral-500 dark:text-neutral-400\">Optional: Password for registry authentication</p></div><div><div class=\"flex items-center\"><input type=\"checkbox\" name=\"registry_insecure\" id=\"registry_insecure\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if cfg.RegistryInsecure {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, " checked")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, " class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-neutral-300 rounded\"> <label for=\"registry_insecure\" class=\"ml-2 block text-sm text-neutral-700 dark:text-neutral-300\">Allow insecure connections (skip TLS verification)</label></div><p class=\"mt-1 text-sm text-neutral-500 dark:text-neutral-400\">Enable this option for self-signed certificates</p></div><div><label for=\"default_theme\" class=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300\">Default Theme</label> <select name=\"default_theme\" id=\"default_theme\" class=\"mt-1 block w-full border-neutral-300 dark:border-neutral-700 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-white dark:bg-neutral-900\"><option value=\"light\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if cfg.DefaultTheme == "light" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, " selected")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, ">Light</option> <option value=\"dark\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if cfg.DefaultTheme == "dark" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, " selected")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, ">Dark</option></select><p class=\"mt-1 text-sm text-neutral-500 dark:text-neutral-400\">The default theme for new users</p></div></div><div class=\"flex justify-end\"><button type=\"submit\" class=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\">Save Settings</button></div></form></div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
